import streamlit as st
import random

st.set_page_config(page_title="Grammar Genius App", layout="wide")

if "selected_category" not in st.session_state:
    st.session_state.selected_category = "Tenses"
if "selected_item_key" not in st.session_state:
    st.session_state.selected_item_key = None
if "answers" not in st.session_state:
    st.session_state.answers = []
if "submitted_questions" not in st.session_state:
    st.session_state.submitted_questions = set()
if "review_mode" not in st.session_state:
    st.session_state.review_mode = False
if "randomized_messages" not in st.session_state:
    motivational_sentences = [
        "You're on fire! üî•",
        "Keep smashing it! üí•",
        "Fantastic answer! üåü"
    ]
    random.shuffle(motivational_sentences)
    st.session_state.randomized_messages = motivational_sentences

DARK_CSS = """
<style>
body, [data-testid="stAppViewContainer"], [data-testid="stAppViewBody"] {
    background-color: #000000 !important; 
    color: #ffffff !important;
}
[data-testid="stSidebar"] {
    background-color: #013369 !important; 
    color: #ffffff !important;
}
h1, h2, h3 {
    color: #ff5722 !important;
    font-family: "Trebuchet MS", sans-serif;
}
main > div {
    padding-top: 20px;
}
</style>
"""

LIGHT_CSS = """
<style>
body, [data-testid="stAppViewContainer"], [data-testid="stAppViewBody"] {
    background-color: #ffffff !important; 
    color: #000000 !important;
}
[data-testid="stSidebar"] {
    background-color: #f0f0f0 !important;
    color: #000000 !important;
}
h1, h2, h3 {
    color: #ff5722 !important;
    font-family: "Trebuchet MS", sans-serif;
}
main > div {
    padding-top: 20px;
}
</style>
"""

# Minimal data
tenses_data = {
    "1": {
        "name": "Present Simple",
        "formation": {"Positive": "Subj + base", "Negative": "...", "Question": "...", "Short answer": "..."},
        "usage_explanation": ["General truths."],
        "usage_cases": [
            {"title": "Case 1", "question": "Does water boil if you heat it?"},
            {"title": "Case 2", "question": "What do you usually do on weekends?"}
            # For a full example, you'd have up to 10 cases
        ],
        "extra_examples": ["I eat, You run, She walks..."]
    },
    "2": {
        "name": "Past Simple",
        "formation": {"Positive": "Subj + V2", "Negative": "...", "Question": "...", "Short answer": "..."},
        "usage_explanation": ["Finished actions in the past."],
        "usage_cases": [
            {"title": "Case 1", "question": "What did you do yesterday?"},
            {"title": "Case 2", "question": "Did you travel last summer?"}
        ],
        "extra_examples": ["I ate, She walked, We danced..."]
    }
}

conditionals_data = {
    "0": {
        "name": "Zero Conditional",
        "formation": {"Positive": "If + present, present", "Negative": "...", "Question": "...", "Short answer": "..."},
        "usage_explanation": ["General truths under a condition."],
        "usage_cases": [
            {"title": "Case 1", "question": "What happens if you don't eat?"}
        ],
        "extra_examples": ["If you freeze water, it becomes ice."]
    }
}

def reset_questions():
    st.session_state.answers = []
    st.session_state.submitted_questions = set()
    st.session_state.review_mode = False
    random.shuffle(st.session_state.randomized_messages)

def get_current_data():
    if st.session_state.selected_category == "Tenses":
        if st.session_state.selected_item_key:
            return tenses_data, st.session_state.selected_item_key
        else:
            return None, None
    else:
        if st.session_state.selected_item_key:
            return conditionals_data, st.session_state.selected_item_key
        else:
            return None, None

st.sidebar.title("Grammar Categories")
category = st.sidebar.radio("Select a category:", ["Tenses", "Conditionals"])
st.session_state.selected_category = category

if st.session_state.selected_category == "Tenses":
    st.sidebar.subheader("Select a Tense")
    tense_options = ["Select a tense..."] + [f"{key}. {tenses_data[key]['name']}" for key in tenses_data]
    selected_option = st.sidebar.selectbox("Choose a tense:", tense_options)
    if selected_option != "Select a tense...":
        current_key = selected_option.split('.')[0].strip()
        if current_key != st.session_state.selected_item_key:
            st.session_state.selected_item_key = current_key
            reset_questions()
    else:
        st.session_state.selected_item_key = None
        reset_questions()
else:
    st.sidebar.subheader("Select a Conditional")
    conditional_options = ["Select a conditional..."] + [f"{key}. {conditionals_data[key]['name']}" for key in conditionals_data]
    selected_option = st.sidebar.selectbox("Choose a conditional:", conditional_options)
    if selected_option != "Select a conditional...":
        current_key = selected_option.split('.')[0].strip()
        if current_key != st.session_state.selected_item_key:
            st.session_state.selected_item_key = current_key
            reset_questions()
    else:
        st.session_state.selected_item_key = None
        reset_questions()

theme_choice = st.sidebar.radio("Choose a Theme:", ["Dark", "Light"], index=0)
if theme_choice == "Dark":
    st.markdown(DARK_CSS, unsafe_allow_html=True)
else:
    st.markdown(LIGHT_CSS, unsafe_allow_html=True)

def show_welcome():
    st.title("Welcome to the Grammar Genius Game!")
    st.write("Pick a tense or conditional from the sidebar to begin.")

def show_explanation_and_questions():
    data_dict, item_key = get_current_data()
    if not data_dict or not item_key:
        return

    info = data_dict[item_key]
    st.header(info["name"])
    st.subheader("How is it formed?")
    for k, v in info["formation"].items():
        st.write(f"{k}: {v}")

    st.subheader("When do we use it?")
    for bullet in info["usage_explanation"]:
        st.write(f"- {bullet}")

    with st.expander("More Examples"):
        for ex in info["extra_examples"]:
            st.write("- " + ex)

    usage_cases = info["usage_cases"]
    total_questions = len(usage_cases)
    answered_count = len(st.session_state.answers)

    st.write("### Practice Questions")
    colA, colB = st.columns(2)
    colA.metric("Questions Answered", f"{answered_count}")
    colB.metric("Total Questions", f"{total_questions}")

    progress_val = int((answered_count / total_questions) * 100)
    st.progress(progress_val)

    if answered_count == total_questions:
        st.success(f"You've answered all questions for {info['name']}!")
        st.markdown(f"**Badge Unlocked:** *{info['name']} Expert!* üèÜ")
        return

    for i, case in enumerate(usage_cases):
        answer_key = f"answer_{item_key}_{i}"
        submit_key = f"submit_{item_key}_{i}"

        if submit_key in st.session_state.submitted_questions:
            st.write(f"**{case['title']}**")
            st.write(case["question"])
            user_answer = st.session_state.get(answer_key, "")
            st.write(f"Your answer: {user_answer}")
            continue

        q_col, a_col = st.columns([2, 3])
        with q_col:
            st.write(f"**{case['title']}**")
            st.write(case["question"])
        with a_col:
            st.text_input("Your answer:", key=answer_key)
            if st.button("Submit", key=submit_key):
                user_answer = st.session_state.get(answer_key, "")
                st.session_state.answers.append(user_answer)
                st.session_state.submitted_questions.add(submit_key)

                msg_index = len(st.session_state.answers) - 1
                if msg_index < len(st.session_state.randomized_messages):
                    msg = st.session_state.randomized_messages[msg_index]
                else:
                    msg = st.session_state.randomized_messages[-1]
                st.success(msg)
                st.write(f"Your answer: {user_answer}")

def main():
    if st.session_state.selected_item_key is None:
        show_welcome()
    else:
        show_explanation_and_questions()

if __name__ == "__main__":
    main()
